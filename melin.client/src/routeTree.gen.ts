/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const UsersettingsLazyImport = createFileRoute('/usersettings')()
const SignupLazyImport = createFileRoute('/signup')()
const ResetPasswordLazyImport = createFileRoute('/reset-password')()
const LogoutLazyImport = createFileRoute('/logout')()
const LoginLazyImport = createFileRoute('/login')()
const LibraryLazyImport = createFileRoute('/library')()
const EditReferenceLazyImport = createFileRoute('/edit-reference')()
const CreateReferenceLazyImport = createFileRoute('/create-reference')()
const ContactLazyImport = createFileRoute('/contact')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const UsersettingsLazyRoute = UsersettingsLazyImport.update({
  id: '/usersettings',
  path: '/usersettings',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/usersettings.lazy').then((d) => d.Route))

const SignupLazyRoute = SignupLazyImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/signup.lazy').then((d) => d.Route))

const ResetPasswordLazyRoute = ResetPasswordLazyImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/reset-password.lazy').then((d) => d.Route),
)

const LogoutLazyRoute = LogoutLazyImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/logout.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const LibraryLazyRoute = LibraryLazyImport.update({
  id: '/library',
  path: '/library',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/library.lazy').then((d) => d.Route))

const EditReferenceLazyRoute = EditReferenceLazyImport.update({
  id: '/edit-reference',
  path: '/edit-reference',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/edit-reference.lazy').then((d) => d.Route),
)

const CreateReferenceLazyRoute = CreateReferenceLazyImport.update({
  id: '/create-reference',
  path: '/create-reference',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/create-reference.lazy').then((d) => d.Route),
)

const ContactLazyRoute = ContactLazyImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/contact.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactLazyImport
      parentRoute: typeof rootRoute
    }
    '/create-reference': {
      id: '/create-reference'
      path: '/create-reference'
      fullPath: '/create-reference'
      preLoaderRoute: typeof CreateReferenceLazyImport
      parentRoute: typeof rootRoute
    }
    '/edit-reference': {
      id: '/edit-reference'
      path: '/edit-reference'
      fullPath: '/edit-reference'
      preLoaderRoute: typeof EditReferenceLazyImport
      parentRoute: typeof rootRoute
    }
    '/library': {
      id: '/library'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof LibraryLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutLazyImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      id: '/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordLazyImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupLazyImport
      parentRoute: typeof rootRoute
    }
    '/usersettings': {
      id: '/usersettings'
      path: '/usersettings'
      fullPath: '/usersettings'
      preLoaderRoute: typeof UsersettingsLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/contact': typeof ContactLazyRoute
  '/create-reference': typeof CreateReferenceLazyRoute
  '/edit-reference': typeof EditReferenceLazyRoute
  '/library': typeof LibraryLazyRoute
  '/login': typeof LoginLazyRoute
  '/logout': typeof LogoutLazyRoute
  '/reset-password': typeof ResetPasswordLazyRoute
  '/signup': typeof SignupLazyRoute
  '/usersettings': typeof UsersettingsLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/contact': typeof ContactLazyRoute
  '/create-reference': typeof CreateReferenceLazyRoute
  '/edit-reference': typeof EditReferenceLazyRoute
  '/library': typeof LibraryLazyRoute
  '/login': typeof LoginLazyRoute
  '/logout': typeof LogoutLazyRoute
  '/reset-password': typeof ResetPasswordLazyRoute
  '/signup': typeof SignupLazyRoute
  '/usersettings': typeof UsersettingsLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/contact': typeof ContactLazyRoute
  '/create-reference': typeof CreateReferenceLazyRoute
  '/edit-reference': typeof EditReferenceLazyRoute
  '/library': typeof LibraryLazyRoute
  '/login': typeof LoginLazyRoute
  '/logout': typeof LogoutLazyRoute
  '/reset-password': typeof ResetPasswordLazyRoute
  '/signup': typeof SignupLazyRoute
  '/usersettings': typeof UsersettingsLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/contact'
    | '/create-reference'
    | '/edit-reference'
    | '/library'
    | '/login'
    | '/logout'
    | '/reset-password'
    | '/signup'
    | '/usersettings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/contact'
    | '/create-reference'
    | '/edit-reference'
    | '/library'
    | '/login'
    | '/logout'
    | '/reset-password'
    | '/signup'
    | '/usersettings'
  id:
    | '__root__'
    | '/'
    | '/contact'
    | '/create-reference'
    | '/edit-reference'
    | '/library'
    | '/login'
    | '/logout'
    | '/reset-password'
    | '/signup'
    | '/usersettings'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ContactLazyRoute: typeof ContactLazyRoute
  CreateReferenceLazyRoute: typeof CreateReferenceLazyRoute
  EditReferenceLazyRoute: typeof EditReferenceLazyRoute
  LibraryLazyRoute: typeof LibraryLazyRoute
  LoginLazyRoute: typeof LoginLazyRoute
  LogoutLazyRoute: typeof LogoutLazyRoute
  ResetPasswordLazyRoute: typeof ResetPasswordLazyRoute
  SignupLazyRoute: typeof SignupLazyRoute
  UsersettingsLazyRoute: typeof UsersettingsLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ContactLazyRoute: ContactLazyRoute,
  CreateReferenceLazyRoute: CreateReferenceLazyRoute,
  EditReferenceLazyRoute: EditReferenceLazyRoute,
  LibraryLazyRoute: LibraryLazyRoute,
  LoginLazyRoute: LoginLazyRoute,
  LogoutLazyRoute: LogoutLazyRoute,
  ResetPasswordLazyRoute: ResetPasswordLazyRoute,
  SignupLazyRoute: SignupLazyRoute,
  UsersettingsLazyRoute: UsersettingsLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/contact",
        "/create-reference",
        "/edit-reference",
        "/library",
        "/login",
        "/logout",
        "/reset-password",
        "/signup",
        "/usersettings"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/contact": {
      "filePath": "contact.lazy.tsx"
    },
    "/create-reference": {
      "filePath": "create-reference.lazy.tsx"
    },
    "/edit-reference": {
      "filePath": "edit-reference.lazy.tsx"
    },
    "/library": {
      "filePath": "library.lazy.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/logout": {
      "filePath": "logout.lazy.tsx"
    },
    "/reset-password": {
      "filePath": "reset-password.lazy.tsx"
    },
    "/signup": {
      "filePath": "signup.lazy.tsx"
    },
    "/usersettings": {
      "filePath": "usersettings.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
