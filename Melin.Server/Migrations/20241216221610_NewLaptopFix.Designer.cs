// <auto-generated />
using System;
using Melin.Server.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Melin.Server.Migrations
{
    [DbContext(typeof(ReferenceContext))]
    [Migration("20241216221610_NewLaptopFix")]
    partial class NewLaptopFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.1.24451.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GroupReference", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("integer");

                    b.Property<int>("ReferencesId")
                        .HasColumnType("integer");

                    b.HasKey("GroupsId", "ReferencesId");

                    b.HasIndex("ReferencesId");

                    b.ToTable("GroupReference");
                });

            modelBuilder.Entity("Melin.Server.Models.Creator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("integer");

                    b.Property<int>("Types")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.ToTable("Creators");
                });

            modelBuilder.Entity("Melin.Server.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRoot")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Melin.Server.Models.Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AbstractNote")
                        .HasColumnType("text");

                    b.Property<string>("Accessed")
                        .HasColumnType("text");

                    b.Property<string>("Archive")
                        .HasColumnType("text");

                    b.Property<string>("ArchiveLocation")
                        .HasColumnType("text");

                    b.Property<string>("CallNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string[]>("ExtraFields")
                        .HasColumnType("text[]");

                    b.Property<int?>("Language")
                        .HasColumnType("integer");

                    b.Property<string>("LibraryCatalog")
                        .HasColumnType("text");

                    b.Property<string>("LocationStored")
                        .HasColumnType("text");

                    b.Property<string>("OwnerEmail")
                        .HasColumnType("text");

                    b.Property<string[]>("Rights")
                        .HasColumnType("text[]");

                    b.Property<string>("ShortTitle")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("URL")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Reference");

                    b.HasDiscriminator().HasValue("Reference");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Melin.Server.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ReferenceTag", b =>
                {
                    b.Property<int>("ReferencesId")
                        .HasColumnType("integer");

                    b.Property<int>("TagsId")
                        .HasColumnType("integer");

                    b.HasKey("ReferencesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ReferenceTag");
                });

            modelBuilder.Entity("Melin.Server.Models.References.Artwork", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Dimensions")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("MapType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Medium")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Scale")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasDiscriminator().HasValue("Artwork");
                });

            modelBuilder.Entity("Melin.Server.Models.References.AudioRecording", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("AudioRecordingFormat")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<int?>("NumberOfVolumes")
                        .HasColumnType("integer");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<string>("RunningTime")
                        .HasColumnType("text");

                    b.Property<string>("SeriesTitle")
                        .HasColumnType("text");

                    b.Property<string>("Volume")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("AudioRecording");
                });

            modelBuilder.Entity("Melin.Server.Models.References.Bill", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("BillNumber")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CodePages")
                        .HasColumnType("text");

                    b.Property<string>("CodeVolume")
                        .HasColumnType("text");

                    b.Property<string>("History")
                        .HasColumnType("text");

                    b.Property<string>("LegislativeBody")
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .HasColumnType("text");

                    b.Property<string>("Session")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Bill");
                });

            modelBuilder.Entity("Melin.Server.Models.References.BlogPost", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("BlogTitle")
                        .HasColumnType("text");

                    b.Property<string>("WebsiteType")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("BlogPost");
                });

            modelBuilder.Entity("Melin.Server.Models.References.Book", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("BookTitle")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Edition")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ISBN")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ISSN")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Issue")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("JournalAbbr")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("PageAmount")
                        .HasColumnType("integer");

                    b.Property<int?>("Pages")
                        .HasColumnType("integer");

                    b.Property<string>("Place")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Publication")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Publisher")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Section")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Series")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("SeriesNumber")
                        .HasColumnType("integer");

                    b.Property<string>("SeriesTitle")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Volume")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("VolumeAmount")
                        .HasColumnType("integer");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Place")
                                .HasColumnName("Book_Place");

                            t.Property("Section")
                                .HasColumnName("Book_Section");

                            t.Property("SeriesTitle")
                                .HasColumnName("Book_SeriesTitle");

                            t.Property("Volume")
                                .HasColumnName("Book_Volume");
                        });

                    b.HasDiscriminator().HasValue("Book");
                });

            modelBuilder.Entity("Melin.Server.Models.References.BookSection", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("BookTitle")
                        .HasColumnType("text");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("Edition")
                        .HasColumnType("text");

                    b.Property<string>("ISBN")
                        .HasColumnType("text");

                    b.Property<int?>("NumberOfVolumes")
                        .HasColumnType("integer");

                    b.Property<string>("Pages")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<string>("Publisher")
                        .HasColumnType("text");

                    b.Property<string>("Series")
                        .HasColumnType("text");

                    b.Property<int?>("SeriesNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Volume")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("BookTitle")
                                .HasColumnName("BookSection_BookTitle");

                            t.Property("Edition")
                                .HasColumnName("BookSection_Edition");

                            t.Property("ISBN")
                                .HasColumnName("BookSection_ISBN");

                            t.Property("NumberOfVolumes")
                                .HasColumnName("BookSection_NumberOfVolumes");

                            t.Property("Pages")
                                .HasColumnName("BookSection_Pages");

                            t.Property("Place")
                                .HasColumnName("BookSection_Place");

                            t.Property("Publisher")
                                .HasColumnName("BookSection_Publisher");

                            t.Property("Series")
                                .HasColumnName("BookSection_Series");

                            t.Property("SeriesNumber")
                                .HasColumnName("BookSection_SeriesNumber");

                            t.Property("Volume")
                                .HasColumnName("BookSection_Volume");
                        });

                    b.HasDiscriminator().HasValue("BookSection");
                });

            modelBuilder.Entity("Melin.Server.Models.References.ConferencePaper", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("ConferenceName")
                        .HasColumnType("text");

                    b.Property<string>("DOI")
                        .HasColumnType("text");

                    b.Property<string>("ISBN")
                        .HasColumnType("text");

                    b.Property<string>("Pages")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<string>("ProceedingsTitle")
                        .HasColumnType("text");

                    b.Property<string>("Publisher")
                        .HasColumnType("text");

                    b.Property<string>("Series")
                        .HasColumnType("text");

                    b.Property<string>("Volume")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("ISBN")
                                .HasColumnName("ConferencePaper_ISBN");

                            t.Property("Pages")
                                .HasColumnName("ConferencePaper_Pages");

                            t.Property("Place")
                                .HasColumnName("ConferencePaper_Place");

                            t.Property("Publisher")
                                .HasColumnName("ConferencePaper_Publisher");

                            t.Property("Series")
                                .HasColumnName("ConferencePaper_Series");

                            t.Property("Volume")
                                .HasColumnName("ConferencePaper_Volume");
                        });

                    b.HasDiscriminator().HasValue("ConferencePaper");
                });

            modelBuilder.Entity("Melin.Server.Models.References.DictionaryEntry", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("DictionaryTitle")
                        .HasColumnType("text");

                    b.Property<string>("Edition")
                        .HasColumnType("text");

                    b.Property<string>("ISBN")
                        .HasColumnType("text");

                    b.Property<string>("NumberOfVolumes")
                        .HasColumnType("text");

                    b.Property<string>("Pages")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<string>("Publisher")
                        .HasColumnType("text");

                    b.Property<string>("Series")
                        .HasColumnType("text");

                    b.Property<int?>("SeriesNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Volume")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Date")
                                .HasColumnName("DictionaryEntry_Date");

                            t.Property("Edition")
                                .HasColumnName("DictionaryEntry_Edition");

                            t.Property("ISBN")
                                .HasColumnName("DictionaryEntry_ISBN");

                            t.Property("NumberOfVolumes")
                                .HasColumnName("DictionaryEntry_NumberOfVolumes");

                            t.Property("Pages")
                                .HasColumnName("DictionaryEntry_Pages");

                            t.Property("Place")
                                .HasColumnName("DictionaryEntry_Place");

                            t.Property("Publisher")
                                .HasColumnName("DictionaryEntry_Publisher");

                            t.Property("Series")
                                .HasColumnName("DictionaryEntry_Series");

                            t.Property("SeriesNumber")
                                .HasColumnName("DictionaryEntry_SeriesNumber");

                            t.Property("Volume")
                                .HasColumnName("DictionaryEntry_Volume");
                        });

                    b.HasDiscriminator().HasValue("DictionaryEntry");
                });

            modelBuilder.Entity("Melin.Server.Models.References.Document", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("Publisher")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Date")
                                .HasColumnName("Document_Date");

                            t.Property("Publisher")
                                .HasColumnName("Document_Publisher");
                        });

                    b.HasDiscriminator().HasValue("Document");
                });

            modelBuilder.Entity("Melin.Server.Models.References.Email", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Date")
                                .HasColumnName("Email_Date");
                        });

                    b.HasDiscriminator().HasValue("Email");
                });

            modelBuilder.Entity("Melin.Server.Models.References.EncyclopediaArticle", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("Edition")
                        .HasColumnType("text");

                    b.Property<string>("EncyclopediaTitle")
                        .HasColumnType("text");

                    b.Property<string>("ISBN")
                        .HasColumnType("text");

                    b.Property<string>("NumberOfVolumes")
                        .HasColumnType("text");

                    b.Property<string>("Pages")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<string>("Publisher")
                        .HasColumnType("text");

                    b.Property<string>("Series")
                        .HasColumnType("text");

                    b.Property<string>("SeriesNumber")
                        .HasColumnType("text");

                    b.Property<string>("Volume")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Date")
                                .HasColumnName("EncyclopediaArticle_Date");

                            t.Property("Edition")
                                .HasColumnName("EncyclopediaArticle_Edition");

                            t.Property("ISBN")
                                .HasColumnName("EncyclopediaArticle_ISBN");

                            t.Property("NumberOfVolumes")
                                .HasColumnName("EncyclopediaArticle_NumberOfVolumes");

                            t.Property("Pages")
                                .HasColumnName("EncyclopediaArticle_Pages");

                            t.Property("Place")
                                .HasColumnName("EncyclopediaArticle_Place");

                            t.Property("Publisher")
                                .HasColumnName("EncyclopediaArticle_Publisher");

                            t.Property("Series")
                                .HasColumnName("EncyclopediaArticle_Series");

                            t.Property("SeriesNumber")
                                .HasColumnName("EncyclopediaArticle_SeriesNumber");

                            t.Property("Volume")
                                .HasColumnName("EncyclopediaArticle_Volume");
                        });

                    b.HasDiscriminator().HasValue("EncyclopediaArticle");
                });

            modelBuilder.Entity("Melin.Server.Models.References.Film", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("Distributor")
                        .HasColumnType("text");

                    b.Property<string>("Genre")
                        .HasColumnType("text");

                    b.Property<string>("RunningTime")
                        .HasColumnType("text");

                    b.Property<string>("VideoRecordingFormat")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Date")
                                .HasColumnName("Film_Date");

                            t.Property("RunningTime")
                                .HasColumnName("Film_RunningTime");
                        });

                    b.HasDiscriminator().HasValue("Film");
                });

            modelBuilder.Entity("Melin.Server.Models.References.ForumPost", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("ForumTitle")
                        .HasColumnType("text");

                    b.Property<string>("PostType")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("ForumPost");
                });

            modelBuilder.Entity("Melin.Server.Models.References.Hearing", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Committee")
                        .HasColumnType("text");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("text");

                    b.Property<string>("History")
                        .HasColumnType("text");

                    b.Property<string>("LegislativeBody")
                        .HasColumnType("text");

                    b.Property<string>("NumberOfVolumes")
                        .HasColumnType("text");

                    b.Property<string>("Pages")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<string>("Publisher")
                        .HasColumnType("text");

                    b.Property<string>("Session")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("History")
                                .HasColumnName("Hearing_History");

                            t.Property("LegislativeBody")
                                .HasColumnName("Hearing_LegislativeBody");

                            t.Property("NumberOfVolumes")
                                .HasColumnName("Hearing_NumberOfVolumes");

                            t.Property("Pages")
                                .HasColumnName("Hearing_Pages");

                            t.Property("Place")
                                .HasColumnName("Hearing_Place");

                            t.Property("Publisher")
                                .HasColumnName("Hearing_Publisher");

                            t.Property("Session")
                                .HasColumnName("Hearing_Session");
                        });

                    b.HasDiscriminator().HasValue("Hearing");
                });

            modelBuilder.Entity("Melin.Server.Models.References.InstantMessage", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.HasDiscriminator().HasValue("InstantMessage");
                });

            modelBuilder.Entity("Melin.Server.Models.References.Interview", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("InterviewMedium")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Interview");
                });

            modelBuilder.Entity("Melin.Server.Models.References.JournalArticle", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("DOI")
                        .HasColumnType("text");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("ISSN")
                        .HasColumnType("text");

                    b.Property<string>("Issue")
                        .HasColumnType("text");

                    b.Property<string>("JournalAbbreviation")
                        .HasColumnType("text");

                    b.Property<string>("Pages")
                        .HasColumnType("text");

                    b.Property<string>("PublicationTitle")
                        .HasColumnType("text");

                    b.Property<string>("Series")
                        .HasColumnType("text");

                    b.Property<string>("SeriesText")
                        .HasColumnType("text");

                    b.Property<string>("SeriesTitle")
                        .HasColumnType("text");

                    b.Property<string>("Volume")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("DOI")
                                .HasColumnName("JournalArticle_DOI");

                            t.Property("Date")
                                .HasColumnName("JournalArticle_Date");

                            t.Property("ISSN")
                                .HasColumnName("JournalArticle_ISSN");

                            t.Property("Issue")
                                .HasColumnName("JournalArticle_Issue");

                            t.Property("Pages")
                                .HasColumnName("JournalArticle_Pages");

                            t.Property("Series")
                                .HasColumnName("JournalArticle_Series");

                            t.Property("SeriesTitle")
                                .HasColumnName("JournalArticle_SeriesTitle");

                            t.Property("Volume")
                                .HasColumnName("JournalArticle_Volume");
                        });

                    b.HasDiscriminator().HasValue("JournalArticle");
                });

            modelBuilder.Entity("Melin.Server.Models.References.LegalCases", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("CaseName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Court")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("DateDecided")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocketNumber")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("FirstPage")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("History")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Reporter")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ReporterVolume")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("History")
                                .HasColumnName("LegalCases_History");
                        });

                    b.HasDiscriminator().HasValue("LegalCases");
                });

            modelBuilder.Entity("Melin.Server.Models.References.Legislation", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("BillNumber")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("CodeNumber")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("CodePages")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("CodeVolume")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Committee")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("DateEnacted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("History")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("LegislativeBody")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NameOfAct")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PublicLawNumber")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Section")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Session")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("BillNumber")
                                .HasColumnName("Legislation_BillNumber");

                            t.Property("Code")
                                .HasColumnName("Legislation_Code");

                            t.Property("CodePages")
                                .HasColumnName("Legislation_CodePages");

                            t.Property("CodeVolume")
                                .HasColumnName("Legislation_CodeVolume");

                            t.Property("Committee")
                                .HasColumnName("Legislation_Committee");

                            t.Property("DocumentNumber")
                                .HasColumnName("Legislation_DocumentNumber");

                            t.Property("History")
                                .HasColumnName("Legislation_History");

                            t.Property("LegislativeBody")
                                .HasColumnName("Legislation_LegislativeBody");

                            t.Property("Section")
                                .HasColumnName("Legislation_Section");

                            t.Property("Session")
                                .HasColumnName("Legislation_Session");
                        });

                    b.HasDiscriminator().HasValue("Legislation");
                });

            modelBuilder.Entity("Melin.Server.Models.References.Letter", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("LetterType")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Date")
                                .HasColumnName("Letter_Date");
                        });

                    b.HasDiscriminator().HasValue("Letter");
                });

            modelBuilder.Entity("Melin.Server.Models.References.MagazineArticle", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("ISSN")
                        .HasColumnType("text");

                    b.Property<string>("Issue")
                        .HasColumnType("text");

                    b.Property<string>("Pages")
                        .HasColumnType("text");

                    b.Property<string>("PublicationTitle")
                        .HasColumnType("text");

                    b.Property<string>("Volume")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Date")
                                .HasColumnName("MagazineArticle_Date");

                            t.Property("ISSN")
                                .HasColumnName("MagazineArticle_ISSN");

                            t.Property("Issue")
                                .HasColumnName("MagazineArticle_Issue");

                            t.Property("Pages")
                                .HasColumnName("MagazineArticle_Pages");

                            t.Property("PublicationTitle")
                                .HasColumnName("MagazineArticle_PublicationTitle");

                            t.Property("Volume")
                                .HasColumnName("MagazineArticle_Volume");
                        });

                    b.HasDiscriminator().HasValue("MagazineArticle");
                });

            modelBuilder.Entity("Melin.Server.Models.References.Manuscript", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("ManuscriptType")
                        .HasColumnType("text");

                    b.Property<string>("NumberOfPages")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Date")
                                .HasColumnName("Manuscript_Date");

                            t.Property("Place")
                                .HasColumnName("Manuscript_Place");
                        });

                    b.HasDiscriminator().HasValue("Manuscript");
                });

            modelBuilder.Entity("Melin.Server.Models.References.Map", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("Edition")
                        .HasColumnType("text");

                    b.Property<string>("ISBN")
                        .HasColumnType("text");

                    b.Property<string>("MapType")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<string>("Publisher")
                        .HasColumnType("text");

                    b.Property<string>("Scale")
                        .HasColumnType("text");

                    b.Property<string>("SeriesTitle")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Date")
                                .HasColumnName("Map_Date");

                            t.Property("Edition")
                                .HasColumnName("Map_Edition");

                            t.Property("ISBN")
                                .HasColumnName("Map_ISBN");

                            t.Property("MapType")
                                .HasColumnName("MapType1");

                            t.Property("Place")
                                .HasColumnName("Map_Place");

                            t.Property("Publisher")
                                .HasColumnName("Map_Publisher");

                            t.Property("Scale")
                                .HasColumnName("Map_Scale");

                            t.Property("SeriesTitle")
                                .HasColumnName("Map_SeriesTitle");
                        });

                    b.HasDiscriminator().HasValue("Map");
                });

            modelBuilder.Entity("Melin.Server.Models.References.NewspaperArticle", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("Edition")
                        .HasColumnType("text");

                    b.Property<string>("ISSN")
                        .HasColumnType("text");

                    b.Property<string>("Pages")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<string>("PublicationTitle")
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Date")
                                .HasColumnName("NewspaperArticle_Date");

                            t.Property("Edition")
                                .HasColumnName("NewspaperArticle_Edition");

                            t.Property("ISSN")
                                .HasColumnName("NewspaperArticle_ISSN");

                            t.Property("Pages")
                                .HasColumnName("NewspaperArticle_Pages");

                            t.Property("Place")
                                .HasColumnName("NewspaperArticle_Place");

                            t.Property("PublicationTitle")
                                .HasColumnName("NewspaperArticle_PublicationTitle");

                            t.Property("Section")
                                .HasColumnName("NewspaperArticle_Section");
                        });

                    b.HasDiscriminator().HasValue("NewspaperArticle");
                });

            modelBuilder.Entity("Melin.Server.Models.References.Patent", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("ApplicationNumber")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Assignee")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("FilingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IssuingAuthority")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("LegalStatus")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PatentNumber")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PriorityNumber")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string[]>("References")
                        .HasColumnType("text[]");

                    b.HasDiscriminator().HasValue("Patent");
                });

            modelBuilder.Entity("Melin.Server.Models.References.Podcast", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("AudioFileType")
                        .HasColumnType("text");

                    b.Property<string>("EpisodeNumber")
                        .HasColumnType("text");

                    b.Property<string>("RunningTime")
                        .HasColumnType("text");

                    b.Property<string>("SeriesTitle")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("RunningTime")
                                .HasColumnName("Podcast_RunningTime");

                            t.Property("SeriesTitle")
                                .HasColumnName("Podcast_SeriesTitle");
                        });

                    b.HasDiscriminator().HasValue("Podcast");
                });

            modelBuilder.Entity("Melin.Server.Models.References.Presentation", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("MeetingName")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<string>("PresentationType")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Date")
                                .HasColumnName("Presentation_Date");

                            t.Property("Place")
                                .HasColumnName("Presentation_Place");
                        });

                    b.HasDiscriminator().HasValue("Presentation");
                });

            modelBuilder.Entity("Melin.Server.Models.References.PrimarySource", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Medium")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PrimarySourceType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Medium")
                                .HasColumnName("PrimarySource_Medium");

                            t.Property("Subject")
                                .HasColumnName("PrimarySource_Subject");
                        });

                    b.HasDiscriminator().HasValue("PrimarySource");
                });

            modelBuilder.Entity("Melin.Server.Models.References.RadioBroadcast", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("AudioRecordingFormat")
                        .HasColumnType("text");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("EpisodeNumber")
                        .HasColumnType("text");

                    b.Property<string>("Network")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<string>("ProgramTitle")
                        .HasColumnType("text");

                    b.Property<string>("RunningTime")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("AudioRecordingFormat")
                                .HasColumnName("RadioBroadcast_AudioRecordingFormat");

                            t.Property("Date")
                                .HasColumnName("RadioBroadcast_Date");

                            t.Property("EpisodeNumber")
                                .HasColumnName("RadioBroadcast_EpisodeNumber");

                            t.Property("Place")
                                .HasColumnName("RadioBroadcast_Place");

                            t.Property("RunningTime")
                                .HasColumnName("RadioBroadcast_RunningTime");
                        });

                    b.HasDiscriminator().HasValue("RadioBroadcast");
                });

            modelBuilder.Entity("Melin.Server.Models.References.Recording", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Distributor")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("EpisodeNumber")
                        .HasColumnType("text");

                    b.Property<string>("FileFormat")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ProgramTitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("RunningTime")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Studio")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Distributor")
                                .HasColumnName("Recording_Distributor");

                            t.Property("EpisodeNumber")
                                .HasColumnName("Recording_EpisodeNumber");

                            t.Property("Genre")
                                .HasColumnName("Recording_Genre");

                            t.Property("Label")
                                .HasColumnName("Recording_Label");

                            t.Property("Network")
                                .HasColumnName("Recording_Network");

                            t.Property("ProgramTitle")
                                .HasColumnName("Recording_ProgramTitle");

                            t.Property("RunningTime")
                                .HasColumnName("Recording_RunningTime");
                        });

                    b.HasDiscriminator().HasValue("Recording");
                });

            modelBuilder.Entity("Melin.Server.Models.References.Report", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("Institution")
                        .HasColumnType("text");

                    b.Property<string>("Pages")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<string>("ReportNumber")
                        .HasColumnType("text");

                    b.Property<string>("ReportType")
                        .HasColumnType("text");

                    b.Property<string>("SeriesTitle")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Date")
                                .HasColumnName("Report_Date");

                            t.Property("Pages")
                                .HasColumnName("Report_Pages");

                            t.Property("Place")
                                .HasColumnName("Report_Place");

                            t.Property("SeriesTitle")
                                .HasColumnName("Report_SeriesTitle");
                        });

                    b.HasDiscriminator().HasValue("Report");
                });

            modelBuilder.Entity("Melin.Server.Models.References.Software", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<string>("ProgrammingLanguage")
                        .HasColumnType("text");

                    b.Property<string>("SeriesTitle")
                        .HasColumnType("text");

                    b.Property<string>("System")
                        .HasColumnType("text");

                    b.Property<string>("VersionNumber")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Date")
                                .HasColumnName("Software_Date");

                            t.Property("Place")
                                .HasColumnName("Software_Place");

                            t.Property("SeriesTitle")
                                .HasColumnName("Software_SeriesTitle");
                        });

                    b.HasDiscriminator().HasValue("Software");
                });

            modelBuilder.Entity("Melin.Server.Models.References.Statute", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CodeNumber")
                        .HasColumnType("text");

                    b.Property<string>("DateEnacted")
                        .HasColumnType("text");

                    b.Property<string>("History")
                        .HasColumnType("text");

                    b.Property<string>("NameOfAct")
                        .HasColumnType("text");

                    b.Property<string>("Pages")
                        .HasColumnType("text");

                    b.Property<string>("PublicLawNumber")
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .HasColumnType("text");

                    b.Property<string>("Session")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Code")
                                .HasColumnName("Statute_Code");

                            t.Property("CodeNumber")
                                .HasColumnName("Statute_CodeNumber");

                            t.Property("DateEnacted")
                                .HasColumnName("Statute_DateEnacted");

                            t.Property("History")
                                .HasColumnName("Statute_History");

                            t.Property("NameOfAct")
                                .HasColumnName("Statute_NameOfAct");

                            t.Property("Pages")
                                .HasColumnName("Statute_Pages");

                            t.Property("PublicLawNumber")
                                .HasColumnName("Statute_PublicLawNumber");

                            t.Property("Section")
                                .HasColumnName("Statute_Section");

                            t.Property("Session")
                                .HasColumnName("Statute_Session");
                        });

                    b.HasDiscriminator().HasValue("Statute");
                });

            modelBuilder.Entity("Melin.Server.Models.References.TVBroadcast", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("EpisodeNumber")
                        .HasColumnType("text");

                    b.Property<string>("Network")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<string>("ProgramTitle")
                        .HasColumnType("text");

                    b.Property<string>("RunningTime")
                        .HasColumnType("text");

                    b.Property<string>("VideoRecordingFormat")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Date")
                                .HasColumnName("TVBroadcast_Date");

                            t.Property("EpisodeNumber")
                                .HasColumnName("TVBroadcast_EpisodeNumber");

                            t.Property("Network")
                                .HasColumnName("TVBroadcast_Network");

                            t.Property("Place")
                                .HasColumnName("TVBroadcast_Place");

                            t.Property("ProgramTitle")
                                .HasColumnName("TVBroadcast_ProgramTitle");

                            t.Property("RunningTime")
                                .HasColumnName("TVBroadcast_RunningTime");

                            t.Property("VideoRecordingFormat")
                                .HasColumnName("TVBroadcast_VideoRecordingFormat");
                        });

                    b.HasDiscriminator().HasValue("TVBroadcast");
                });

            modelBuilder.Entity("Melin.Server.Models.References.Thesis", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("NumberOfPages")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<string>("ThesisType")
                        .HasColumnType("text");

                    b.Property<string>("University")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Date")
                                .HasColumnName("Thesis_Date");

                            t.Property("NumberOfPages")
                                .HasColumnName("Thesis_NumberOfPages");

                            t.Property("Place")
                                .HasColumnName("Thesis_Place");
                        });

                    b.HasDiscriminator().HasValue("Thesis");
                });

            modelBuilder.Entity("Melin.Server.Models.References.VideoRecording", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("ISBN")
                        .HasColumnType("text");

                    b.Property<string>("NumberOfVolumes")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<string>("RunningTime")
                        .HasColumnType("text");

                    b.Property<string>("SeriesTitle")
                        .HasColumnType("text");

                    b.Property<string>("Studio")
                        .HasColumnType("text");

                    b.Property<string>("VideoRecordingFormat")
                        .HasColumnType("text");

                    b.Property<string>("Volume")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Date")
                                .HasColumnName("VideoRecording_Date");

                            t.Property("ISBN")
                                .HasColumnName("VideoRecording_ISBN");

                            t.Property("NumberOfVolumes")
                                .HasColumnName("VideoRecording_NumberOfVolumes");

                            t.Property("Place")
                                .HasColumnName("VideoRecording_Place");

                            t.Property("RunningTime")
                                .HasColumnName("VideoRecording_RunningTime");

                            t.Property("SeriesTitle")
                                .HasColumnName("VideoRecording_SeriesTitle");

                            t.Property("Studio")
                                .HasColumnName("VideoRecording_Studio");

                            t.Property("VideoRecordingFormat")
                                .HasColumnName("VideoRecordingFormat1");

                            t.Property("Volume")
                                .HasColumnName("VideoRecording_Volume");
                        });

                    b.HasDiscriminator().HasValue("VideoRecording");
                });

            modelBuilder.Entity("Melin.Server.Models.References.Website", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("ForumTitle")
                        .HasColumnType("text");

                    b.Property<string>("PostType")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("WebsiteTitle")
                        .HasColumnType("text");

                    b.Property<string>("WebsiteType")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Date")
                                .HasColumnName("Website_Date");

                            t.Property("ForumTitle")
                                .HasColumnName("Website_ForumTitle");

                            t.Property("PostType")
                                .HasColumnName("Website_PostType");

                            t.Property("WebsiteType")
                                .HasColumnName("WebsiteType1");
                        });

                    b.HasDiscriminator().HasValue("Website");
                });

            modelBuilder.Entity("GroupReference", b =>
                {
                    b.HasOne("Melin.Server.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melin.Server.Models.Reference", null)
                        .WithMany()
                        .HasForeignKey("ReferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Melin.Server.Models.Creator", b =>
                {
                    b.HasOne("Melin.Server.Models.Reference", null)
                        .WithMany("Creators")
                        .HasForeignKey("ReferenceId");
                });

            modelBuilder.Entity("Melin.Server.Models.Group", b =>
                {
                    b.HasOne("Melin.Server.Models.Group", null)
                        .WithMany("Groups")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("ReferenceTag", b =>
                {
                    b.HasOne("Melin.Server.Models.Reference", null)
                        .WithMany()
                        .HasForeignKey("ReferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melin.Server.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Melin.Server.Models.Group", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Melin.Server.Models.Reference", b =>
                {
                    b.Navigation("Creators");
                });
#pragma warning restore 612, 618
        }
    }
}
