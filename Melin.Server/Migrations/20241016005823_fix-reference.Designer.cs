// <auto-generated />
using System;
using Melin.Server.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Melin.Server.Migrations
{
    [DbContext(typeof(ReferenceContext))]
    [Migration("20241016005823_fix-reference")]
    partial class fixreference
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.1.24451.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Melin.Server.Models.Creator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.ToTable("Creator");
                });

            modelBuilder.Entity("Melin.Server.Models.Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string[]>("ExtraFields")
                        .HasColumnType("text[]");

                    b.Property<int?>("Language")
                        .HasColumnType("integer");

                    b.Property<string[]>("Rights")
                        .HasColumnType("text[]");

                    b.Property<string>("ShortTitle")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasMaxLength(256)
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Reference");

                    b.HasDiscriminator().HasValue("Reference");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Melin.Server.Models.Artwork", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Dimensions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MapType")
                        .HasColumnType("text");

                    b.Property<string>("Medium")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Scale")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Medium")
                                .HasColumnName("Artwork_Medium");
                        });

                    b.HasDiscriminator().HasValue("Artwork");
                });

            modelBuilder.Entity("Melin.Server.Models.Book", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("BookTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ISSN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Issue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JournalAbbr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PageAmount")
                        .HasColumnType("integer");

                    b.Property<int>("Pages")
                        .HasColumnType("integer");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Publication")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SeriesNumber")
                        .HasColumnType("integer");

                    b.Property<string>("SeriesTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Volume")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VolumeAmount")
                        .HasColumnType("integer");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("Place")
                                .HasColumnName("Book_Place");

                            t.Property("Section")
                                .HasColumnName("Book_Section");
                        });

                    b.HasDiscriminator().HasValue("Book");
                });

            modelBuilder.Entity("Melin.Server.Models.LegalCases", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("CaseName")
                        .HasColumnType("text");

                    b.Property<string>("Court")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateDecided")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocketNumber")
                        .HasColumnType("text");

                    b.Property<string>("FirstPage")
                        .HasColumnType("text");

                    b.Property<string>("History")
                        .HasColumnType("text");

                    b.Property<string>("Reporter")
                        .HasColumnType("text");

                    b.Property<string>("ReporterVolume")
                        .HasColumnType("text");

                    b.ToTable("Reference", t =>
                        {
                            t.Property("History")
                                .HasColumnName("LegalCases_History");
                        });

                    b.HasDiscriminator().HasValue("LegalCases");
                });

            modelBuilder.Entity("Melin.Server.Models.Legislation", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("BillNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodeNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodePages")
                        .HasColumnType("text");

                    b.Property<string>("CodeVolume")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Committee")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnacted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("text");

                    b.Property<string>("History")
                        .HasColumnType("text");

                    b.Property<string>("LegislativeBody")
                        .HasColumnType("text");

                    b.Property<string>("NameOfAct")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PublicLawNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .HasColumnType("text");

                    b.Property<string>("Session")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Legislation");
                });

            modelBuilder.Entity("Melin.Server.Models.Patent", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("ApplicationNumber")
                        .HasColumnType("text");

                    b.Property<string>("Assignee")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("FilingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IssuingAuthority")
                        .HasColumnType("text");

                    b.Property<string>("LegalStatus")
                        .HasColumnType("text");

                    b.Property<string>("PatentNumber")
                        .HasColumnType("text");

                    b.Property<string>("PriorityNumber")
                        .HasColumnType("text");

                    b.Property<string[]>("References")
                        .HasColumnType("text[]");

                    b.HasDiscriminator().HasValue("Patent");
                });

            modelBuilder.Entity("Melin.Server.Models.Presentation", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("ConferenceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PresentationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProceedingTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Presentation");
                });

            modelBuilder.Entity("Melin.Server.Models.PrimarySource", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Medium")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimarySourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("PrimarySource");
                });

            modelBuilder.Entity("Melin.Server.Models.Recording", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Distributor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EpisodeNumber")
                        .HasColumnType("integer");

                    b.Property<string>("FileFormat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProgramTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RunningTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Studio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Recording");
                });

            modelBuilder.Entity("Melin.Server.Models.Report", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReportNumber")
                        .HasColumnType("integer");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Report");
                });

            modelBuilder.Entity("Melin.Server.Models.Software", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<string>("ProgrammingLanguage")
                        .HasColumnType("text");

                    b.Property<string>("System")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Software");
                });

            modelBuilder.Entity("Melin.Server.Models.Website", b =>
                {
                    b.HasBaseType("Melin.Server.Models.Reference");

                    b.Property<string>("ForumTitle")
                        .HasColumnType("text");

                    b.Property<string>("PostType")
                        .HasColumnType("text");

                    b.Property<string>("WebsiteTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WebsiteType")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Website");
                });

            modelBuilder.Entity("Melin.Server.Models.Creator", b =>
                {
                    b.HasOne("Melin.Server.Models.Reference", null)
                        .WithMany("Creators")
                        .HasForeignKey("ReferenceId");
                });

            modelBuilder.Entity("Melin.Server.Models.Reference", b =>
                {
                    b.Navigation("Creators");
                });
#pragma warning restore 612, 618
        }
    }
}
